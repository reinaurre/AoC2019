using NUnit.Framework;

namespace Tests
{
    using Intcode_Computer;

    public class IntcodeComputer_Test
    {
        private const string OutOfRangeErrorMessage = @"ERROR: [\w\s?]+ pointer \w+ is larger than array length \w+!";

        [SetUp]
        public void Setup()
        {
        }

        [Test]
        public void ComputeIntcode_WithValidStringInput_ReturnCorrectAnswer()
        {
            // Arrange
            string input = "1,1,1,4,99,5,6,0,99";
            string expected = "30,1,1,4,2,5,6,0,99";
            IntcodeComputer IC = new IntcodeComputer(input);

            // Act
            string output = IC.ComputeIntcodeToString();

            // Assert
            Assert.That(output, Is.EqualTo(expected));
        }

        [Test]
        public void ComputeIntcode_WithValidIntInput_ReturnCorrectAnswer()
        {
            // Arrange
            long[] input = new long[] { 2, 4, 4, 5, 99, 0 };
            long[] expected = new long[] { 2, 4, 4, 5, 99, 9801 };
            IntcodeComputer IC = new IntcodeComputer(input);

            // Act
            long[] output = IC.ComputeIntcode();

            // Assert
            Assert.That(output, Is.EqualTo(expected));
        }

        [Test]
        public void ComputeIntcode_WithInvalidIntInput_ShouldThrowArgumentOutOfRange()
        {
            // Arrange
            long[] input = new long[] { 2, 99, 4, 5, 99, 0 };
            IntcodeComputer IC = new IntcodeComputer(input);

            // Act
            try
            {
                long[] output = IC.ComputeIntcode(input);
            }
            catch(System.ArgumentOutOfRangeException e)
            {
                // Assert
                Assert.That(e.Message, Does.Match(OutOfRangeErrorMessage));
                return;
            }

            Assert.Fail("The expected exception was not thrown.");
        }

        [Test]
        public void ComputeIntcode_Day2Part1_ReturnCorrectAnswer()
        {
            // Arrange
            long[] input = new long[] { 1, 12, 2, 3, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 1, 9, 19, 1, 5, 19, 23, 1, 6, 23, 27, 1, 27, 10, 31, 1, 31, 5, 35, 2, 10, 35, 39, 1, 9, 39, 43, 1, 43, 5, 47, 1, 47, 6, 51, 2, 51, 6, 55, 1, 13, 55, 59, 2, 6, 59, 63, 1, 63, 5, 67, 2, 10, 67, 71, 1, 9, 71, 75, 1, 75, 13, 79, 1, 10, 79, 83, 2, 83, 13, 87, 1, 87, 6, 91, 1, 5, 91, 95, 2, 95, 9, 99, 1, 5, 99, 103, 1, 103, 6, 107, 2, 107, 13, 111, 1, 111, 10, 115, 2, 10, 115, 119, 1, 9, 119, 123, 1, 123, 9, 127, 1, 13, 127, 131, 2, 10, 131, 135, 1, 135, 5, 139, 1, 2, 139, 143, 1, 143, 5, 0, 99, 2, 0, 14, 0 };
            IntcodeComputer IC = new IntcodeComputer(input);
            long expected = 3562672;

            // Act
            long[] output = IC.ComputeIntcode();

            // Assert
            Assert.That(output[0], Is.EqualTo(expected));
        }

        [Test]
        public void ComputeIntcode_Day2Part2_ReturnCorrectAnswer()
        {
            // Arrange
            long[] input = new long[] { 1, 12, 2, 3, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 1, 9, 19, 1, 5, 19, 23, 1, 6, 23, 27, 1, 27, 10, 31, 1, 31, 5, 35, 2, 10, 35, 39, 1, 9, 39, 43, 1, 43, 5, 47, 1, 47, 6, 51, 2, 51, 6, 55, 1, 13, 55, 59, 2, 6, 59, 63, 1, 63, 5, 67, 2, 10, 67, 71, 1, 9, 71, 75, 1, 75, 13, 79, 1, 10, 79, 83, 2, 83, 13, 87, 1, 87, 6, 91, 1, 5, 91, 95, 2, 95, 9, 99, 1, 5, 99, 103, 1, 103, 6, 107, 2, 107, 13, 111, 1, 111, 10, 115, 2, 10, 115, 119, 1, 9, 119, 123, 1, 123, 9, 127, 1, 13, 127, 131, 2, 10, 131, 135, 1, 135, 5, 139, 1, 2, 139, 143, 1, 143, 5, 0, 99, 2, 0, 14, 0 };
            long target = 19690720;
            bool isFound = false;
            long outValue = 0;
            long expected = 8250;

            // Act
            for (int noun = 0; noun <= 99; noun++)
            {
                if (!isFound)
                {
                    for (int verb = 0; verb <= 99; verb++)
                    {
                        if (!isFound)
                        {
                            long[] testIntcode = (long[])input.Clone();
                            testIntcode[1] = noun;
                            testIntcode[2] = verb;
                            IntcodeComputer IC = new IntcodeComputer(testIntcode);

                            testIntcode = IC.ComputeIntcode();

                            if (testIntcode[0] == target)
                            {
                                outValue = 100 * noun + verb;
                                isFound = true;
                            }
                        }
                    }
                }
            }

            // Assert
            Assert.That(outValue, Is.EqualTo(expected));
        }

        [Test]
        public void ComputeIntcode_Day5Part1_ReturnCorrectAnswer()
        {
            // Arrange
            long[] input = new long[] { 3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1101, 65, 73, 225, 1101, 37, 7, 225, 1101, 42, 58, 225, 1102, 62, 44, 224, 101, -2728, 224, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224, 224, 1, 223, 224, 223, 1, 69, 126, 224, 101, -92, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 7, 224, 224, 1, 223, 224, 223, 1102, 41, 84, 225, 1001, 22, 92, 224, 101, -150, 224, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 224, 223, 223, 1101, 80, 65, 225, 1101, 32, 13, 224, 101, -45, 224, 224, 4, 224, 102, 8, 223, 223, 101, 1, 224, 224, 1, 224, 223, 223, 1101, 21, 18, 225, 1102, 5, 51, 225, 2, 17, 14, 224, 1001, 224, -2701, 224, 4, 224, 1002, 223, 8, 223, 101, 4, 224, 224, 1, 223, 224, 223, 101, 68, 95, 224, 101, -148, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 1, 224, 224, 1, 223, 224, 223, 1102, 12, 22, 225, 102, 58, 173, 224, 1001, 224, -696, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 6, 224, 1, 223, 224, 223, 1002, 121, 62, 224, 1001, 224, -1302, 224, 4, 224, 1002, 223, 8, 223, 101, 4, 224, 224, 1, 223, 224, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1008, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 329, 1001, 223, 1, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 344, 1001, 223, 1, 223, 1007, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 359, 1001, 223, 1, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 374, 1001, 223, 1, 223, 108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 389, 101, 1, 223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 404, 101, 1, 223, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 419, 101, 1, 223, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 434, 101, 1, 223, 223, 107, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 449, 101, 1, 223, 223, 7, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 464, 101, 1, 223, 223, 1107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 479, 1001, 223, 1, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 494, 101, 1, 223, 223, 108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 509, 101, 1, 223, 223, 1108, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 524, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 539, 101, 1, 223, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 554, 101, 1, 223, 223, 8, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 569, 101, 1, 223, 223, 107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 584, 101, 1, 223, 223, 1108, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 599, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 614, 101, 1, 223, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 629, 101, 1, 223, 223, 1108, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 644, 1001, 223, 1, 223, 1107, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 659, 1001, 223, 1, 223, 108, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 674, 101, 1, 223, 223, 4, 223, 99, 226 };
            long inputVal = 1;
            long expected = 14522484;
            IntcodeComputer IC = new IntcodeComputer(input);

            // Act
            IC.ComputeIntcode(inputVal);
            long output = IC.OutputValue[IC.OutputValue.Count-1];

            // Assert
            Assert.That(output, Is.EqualTo(expected));
        }

        [Test]
        public void ComputeIntcode_Day5Part2_ReturnCorrectAnswer()
        {
            // Arrange
            long[] input = new long[] { 3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1101, 65, 73, 225, 1101, 37, 7, 225, 1101, 42, 58, 225, 1102, 62, 44, 224, 101, -2728, 224, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224, 224, 1, 223, 224, 223, 1, 69, 126, 224, 101, -92, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 7, 224, 224, 1, 223, 224, 223, 1102, 41, 84, 225, 1001, 22, 92, 224, 101, -150, 224, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 224, 223, 223, 1101, 80, 65, 225, 1101, 32, 13, 224, 101, -45, 224, 224, 4, 224, 102, 8, 223, 223, 101, 1, 224, 224, 1, 224, 223, 223, 1101, 21, 18, 225, 1102, 5, 51, 225, 2, 17, 14, 224, 1001, 224, -2701, 224, 4, 224, 1002, 223, 8, 223, 101, 4, 224, 224, 1, 223, 224, 223, 101, 68, 95, 224, 101, -148, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 1, 224, 224, 1, 223, 224, 223, 1102, 12, 22, 225, 102, 58, 173, 224, 1001, 224, -696, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 6, 224, 1, 223, 224, 223, 1002, 121, 62, 224, 1001, 224, -1302, 224, 4, 224, 1002, 223, 8, 223, 101, 4, 224, 224, 1, 223, 224, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1008, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 329, 1001, 223, 1, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 344, 1001, 223, 1, 223, 1007, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 359, 1001, 223, 1, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 374, 1001, 223, 1, 223, 108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 389, 101, 1, 223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 404, 101, 1, 223, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 419, 101, 1, 223, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 434, 101, 1, 223, 223, 107, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 449, 101, 1, 223, 223, 7, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 464, 101, 1, 223, 223, 1107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 479, 1001, 223, 1, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 494, 101, 1, 223, 223, 108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 509, 101, 1, 223, 223, 1108, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 524, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 539, 101, 1, 223, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 554, 101, 1, 223, 223, 8, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 569, 101, 1, 223, 223, 107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 584, 101, 1, 223, 223, 1108, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 599, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 614, 101, 1, 223, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 629, 101, 1, 223, 223, 1108, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 644, 1001, 223, 1, 223, 1107, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 659, 1001, 223, 1, 223, 108, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 674, 101, 1, 223, 223, 4, 223, 99, 226 };
            long inputVal = 5;
            long expected = 4655956;
            IntcodeComputer IC = new IntcodeComputer(input);

            // Act
            IC.ComputeIntcode(inputVal);
            long output = IC.OutputValue[IC.OutputValue.Count-1];

            // Assert
            Assert.That(output, Is.EqualTo(expected));
        }

        [Test]
        public void ComputeIntcode_Day7Part1_ReturnCorrectAnswer()
        {
            // Arrange
            long[] input = new long[] { 3, 8, 1001, 8, 10, 8, 105, 1, 0, 0, 21, 38, 55, 72, 93, 118, 199, 280, 361, 442, 99999, 3, 9, 1001, 9, 2, 9, 1002, 9, 5, 9, 101, 4, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 3, 9, 1001, 9, 5, 9, 1002, 9, 4, 9, 4, 9, 99, 3, 9, 101, 4, 9, 9, 1002, 9, 3, 9, 1001, 9, 4, 9, 4, 9, 99, 3, 9, 1002, 9, 4, 9, 1001, 9, 4, 9, 102, 5, 9, 9, 1001, 9, 4, 9, 4, 9, 99, 3, 9, 101, 3, 9, 9, 1002, 9, 3, 9, 1001, 9, 3, 9, 102, 5, 9, 9, 101, 4, 9, 9, 4, 9, 99, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 99, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 99, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99 };
            long expected = 368584;

            // Act
            long maxvalue = 0;

            // HAHAHAHA THIS IS FUCKING GROSS
            for (int a = 0; a < 5; a++)
            {
                for (int b = 0; b < 5; b++)
                {
                    if (b != a)
                    {
                        for (int c = 0; c < 5; c++)
                        {
                            if (c != a && c != b)
                            {
                                for (int d = 0; d < 5; d++)
                                {
                                    if (d != a && d != b && d != c)
                                    {
                                        for (int e = 0; e < 5; e++)
                                        {
                                            if (e != a && e != b && e != c && e != d)
                                            {
                                                IntcodeComputer IC1 = new IntcodeComputer(input);
                                                IntcodeComputer IC2 = new IntcodeComputer(input);
                                                IntcodeComputer IC3 = new IntcodeComputer(input);
                                                IntcodeComputer IC4 = new IntcodeComputer(input);
                                                IntcodeComputer IC5 = new IntcodeComputer(input);

                                                long[] inputVals = new long[2] { a, 0 };
                                                IC1.ComputeIntcode(inputVals);
                                                inputVals[1] = IC1.OutputValue[IC1.OutputValue.Count - 1];

                                                inputVals[0] = b;
                                                IC2.ComputeIntcode(inputVals);
                                                inputVals[1] = IC2.OutputValue[IC2.OutputValue.Count - 1];

                                                inputVals[0] = c;
                                                IC3.ComputeIntcode(inputVals);
                                                inputVals[1] = IC3.OutputValue[IC3.OutputValue.Count - 1];

                                                inputVals[0] = d;
                                                IC4.ComputeIntcode(inputVals);
                                                inputVals[1] = IC4.OutputValue[IC4.OutputValue.Count - 1];

                                                inputVals[0] = e;
                                                IC5.ComputeIntcode(inputVals);
                                                inputVals[1] = IC5.OutputValue[IC5.OutputValue.Count - 1];

                                                if (inputVals[1] > maxvalue)
                                                {
                                                    maxvalue = inputVals[1];
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // Assert
            Assert.That(maxvalue, Is.EqualTo(expected));
        }

        [Test]
        public void ComputeIntcode_Day7Part2_ReturnCorrectAnswer()
        {
            // Arrange
            long[] input = new long[] { 3, 8, 1001, 8, 10, 8, 105, 1, 0, 0, 21, 38, 55, 72, 93, 118, 199, 280, 361, 442, 99999, 3, 9, 1001, 9, 2, 9, 1002, 9, 5, 9, 101, 4, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 3, 9, 1001, 9, 5, 9, 1002, 9, 4, 9, 4, 9, 99, 3, 9, 101, 4, 9, 9, 1002, 9, 3, 9, 1001, 9, 4, 9, 4, 9, 99, 3, 9, 1002, 9, 4, 9, 1001, 9, 4, 9, 102, 5, 9, 9, 1001, 9, 4, 9, 4, 9, 99, 3, 9, 101, 3, 9, 9, 1002, 9, 3, 9, 1001, 9, 3, 9, 102, 5, 9, 9, 101, 4, 9, 9, 4, 9, 99, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 99, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 99, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99 };
            long expected = 35993240;

            // Act
            long maxvalue = 0;

            // HAHAHAHA THIS IS FUCKING GROSS
            for (int a = 5; a <= 9; a++)
            {
                for (int b = 5; b <= 9; b++)
                {
                    if (b != a)
                    {
                        for (int c = 5; c <= 9; c++)
                        {
                            if (c != a && c != b)
                            {
                                for (int d = 5; d <= 9; d++)
                                {
                                    if (d != a && d != b && d != c)
                                    {
                                        for (int e = 5; e <= 9; e++)
                                        {
                                            if (e != a && e != b && e != c && e != d)
                                            {
                                                IntcodeComputer IC1 = new IntcodeComputer(input);
                                                IntcodeComputer IC2 = new IntcodeComputer(input);
                                                IntcodeComputer IC3 = new IntcodeComputer(input);
                                                IntcodeComputer IC4 = new IntcodeComputer(input);
                                                IntcodeComputer IC5 = new IntcodeComputer(input);

                                                long output = 0;
                                                bool firstLoop = true;
                                                while (IC5.LatestOpcode != Opcodes.Terminate)
                                                {
                                                    long[] inputVals = firstLoop ? new long[2] { a, 0 } : new long[1] { output };
                                                    int outputIndex = firstLoop ? 1 : 0;

                                                    IC1.ComputeIntcode(inputVals, true);
                                                    inputVals[outputIndex] = IC1.OutputValue[IC1.OutputValue.Count - 1];

                                                    inputVals[0] = firstLoop ? b : inputVals[0];
                                                    IC2.ComputeIntcode(inputVals, true);
                                                    inputVals[outputIndex] = IC2.OutputValue[IC2.OutputValue.Count - 1];

                                                    inputVals[0] = firstLoop ? c : inputVals[0];
                                                    IC3.ComputeIntcode(inputVals, true);
                                                    inputVals[outputIndex] = IC3.OutputValue[IC3.OutputValue.Count - 1];

                                                    inputVals[0] = firstLoop ? d : inputVals[0];
                                                    IC4.ComputeIntcode(inputVals, true);
                                                    inputVals[outputIndex] = IC4.OutputValue[IC4.OutputValue.Count - 1];

                                                    inputVals[0] = firstLoop ? e : inputVals[0];
                                                    IC5.ComputeIntcode(inputVals, true);
                                                    output = IC5.OutputValue[IC5.OutputValue.Count - 1];

                                                    firstLoop = false;
                                                }

                                                if (output > maxvalue)
                                                {
                                                    maxvalue = output;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // Assert
            Assert.That(maxvalue, Is.EqualTo(expected));
        }
    }
}